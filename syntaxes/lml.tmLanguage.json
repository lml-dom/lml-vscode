{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "LML",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#text"
    },
    {
      "include": "#tag"
    }
  ],
  "repository": {
    "comment": {
      "begin": "^(\\s*)[#$]",
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "comment.block.lml"
    },
    "strings": {
      "begin": "(?<=(\\=\"))(.)",
      "end": "(\\0)\\s*$",
      "patterns": [
        {
          "match": "\\\\."
        }
      ]
    },
    "tag": {
      "patterns": [
        {
          "begin": "^(\\s*)((?i)\\btextarea\\b)\\s*(.*$)",
          "beginCaptures": {
            "2": {
              "match": "^.*(;.*)$",
              "name": "entity.name.tag.lml"
            },
            "3": {
              "patterns": [
                {
                  "include": "#tag_attributes"
                }
              ]
            }
          },
          "end": "^(?!(\\1\\s)|\\s*$)",
          "patterns": [
            {
              "begin": "^(?!(\\s*\\\\)).*",
              "end": "^(?!(\\s*\\\\)|\\s*$)",
              "name": "string.unquoted.lml"
            },
            {
              "begin": "^\\s*\\\\",
              "end": "$",
              "patterns": [
                {
                  "include": "#tag_attributes"
                }
              ]
            }
          ]
        },
        {
          "begin": "^(\\s*)((?i)\\bscript\\b)\\s*(.*$)",
          "beginCaptures": {
            "2": {
              "match": "^.*(;.*)$",
              "name": "entity.name.tag.lml"
            },
            "3": {
              "patterns": [
                {
                  "include": "#tag_attributes"
                }
              ]
            }
          },
          "end": "^(?!(\\1\\s)|\\s*$)",
          "patterns": [
            {
              "begin": "^\\s*\\\\",
              "end": "$",
              "patterns": [
                {
                  "include": "#tag_attributes"
                }
              ]
            },
            {
              "include": "source.js"
            }
          ]
        },
        {
          "begin": "^(\\s*)((?i)\\bstyle\\b)\\s*(.*$)",
          "beginCaptures": {
            "2": {
              "match": "^.*(;.*)$",
              "name": "entity.name.tag.lml"
            },
            "3": {
              "patterns": [
                {
                  "include": "#tag_attributes"
                }
              ]
            }
          },
          "end": "^(?!(\\1\\s)|\\s*$)",
          "patterns": [
            {
              "begin": "^\\s*\\\\",
              "end": "$",
              "patterns": [
                {
                  "include": "#tag_attributes"
                }
              ]
            },
            {
              "include": "source.css"
            }
          ]
        },
        {
          "begin": "^(\\s*)([\\!A-Za-z][A-Za-z0-9_]*|[A-Za-z][A-Za-z0-9\\-_\\:]*[A-Za-z0-9])\\s*(.*$)",
          "beginCaptures": {
            "2": {
              "match": "^.*(;.*)$",
              "name": "entity.name.tag.lml"
            },
            "3": {
              "patterns": [
                {
                  "include": "#tag_attributes"
                }
              ]
            }
          },
          "end": "^(?!(\\1\\s)|\\s*$)",
          "patterns": [
            {
              "begin": "^\\s*\\\\",
              "end": "$",
              "patterns": [
                {
                  "include": "#tag_attributes"
                }
              ]
            },
            {
              "include": "#comment"
            },
            {
              "include": "#text"
            },
            {
              "include": "#tag"
            }
          ]
        }
      ]
    },
    "tag_attributes": {
      "begin": "\\s*",
      "end": "\\s*$",
      "patterns": [
        {
          "match": "(;.*)((?!;).*)",
          "name": "constant.character.escape.lml"
        },
        {          
          "include": "#strings"
        },
        {
          "match": "([A-Za-z\\(\\[\\*][A-Za-z0-9\\-_\\(\\)\\[\\]]*[A-Za-z0-9\\)\\]]*\\s*)",
          "name": "entity.other.attribute-name.lml"
        },
        {
          "match": "(?<=\\=).*?(?=\\s|$)",
          "name": "string.unquoted.lml"
        }
      ]
    },
    "text": {
      "begin": "(.*)(;.*$)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#tag"
            }
          ]
        },
        "2": {
          "name": "constant.character.escape.lml"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "patterns": [
        {
          "match": "^.*",
          "name": "constant.character.escape.lml"
        }
      ]
    }
  },
  "scopeName": "source.lml"
}
